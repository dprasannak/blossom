it('should execute the accept block actions when confirmation is accepted', () => {
  // Mock the form controls and the values
  const refNumExampleControl = new FormControl('initialValue');
  const referenceNumControl = new FormControl('initialValue');
  const requiredRefControl = new FormControl('someValue');

  // Spy on orderDetailsFormControls to return the mocked controls
  spyOnProperty(component, 'orderDetailsFormControls', 'get').and.returnValue({
    controls: {
      refNumExample: refNumExampleControl,
      referenceNum: referenceNumControl,
      requiredRef: requiredRefControl
    }
  } as any);

  // Set initial values for the component properties
  component.previousReqRefType = 'oldType';
  component.newReferenceNum = 'oldRefNum';
  component.previousReferenceNum = 'oldPreviousRefNum';

  // Spy on confirmationService.confirm and simulate accept
  spyOn(confirmationService, 'confirm').and.callFake((params: any) => {
    params.accept();
  });

  // Spy on methods called in accept block
  spyOn(component, 'resetSampleFormatAndExample').and.callThrough();
  spyOn(component, 'fetchRefNumberAndFormat').and.callThrough();

  // Call the method with a new event value
  component.askConfirmationFromUser('newType');

  // Assertions
  expect(confirmationService.confirm).toHaveBeenCalled();
  expect(component.previousReqRefType).toEqual('newType');
  expect(refNumExampleControl.value).toBeNull();
  expect(referenceNumControl.value).toBeNull();
  expect(component.newReferenceNum).toEqual('');
  expect(component.previousReferenceNum).toEqual('');
  expect(component.resetSampleFormatAndExample).toHaveBeenCalled();
  expect(component.fetchRefNumberAndFormat).toHaveBeenCalled();

  // Check that referenceNum is marked as touched if it is not pristine
  if (!referenceNumControl.pristine) {
    expect(referenceNumControl.touched).toBeTrue();
  }
});