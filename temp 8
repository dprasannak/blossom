import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ReactiveFormsModule } from '@angular/forms';
import { ConfirmationService } from 'primeng/api';
import { of, throwError } from 'rxjs';
import { YourComponent } from './your.component';

describe('YourComponent', () => {
  let component: YourComponent;
  let fixture: ComponentFixture<YourComponent>;
  let confirmationService: jasmine.SpyObj<ConfirmationService>;

  beforeEach(() => {
    const confirmationServiceSpy = jasmine.createSpyObj('ConfirmationService', ['confirm']);

    TestBed.configureTestingModule({
      declarations: [YourComponent],
      imports: [ReactiveFormsModule],
      providers: [
        { provide: ConfirmationService, useValue: confirmationServiceSpy }
      ]
    }).compileComponents();

    fixture = TestBed.createComponent(YourComponent);
    component = fixture.componentInstance;
    confirmationService = TestBed.inject(ConfirmationService) as jasmine.SpyObj<ConfirmationService>;
  });

  it('should ask for confirmation when required reference type changes', () => {
    // Arrange
    component.previousReqRefType = 'oldType';
    component.orderDetailsFormControls = {
      controls: {
        refNumExample: { reset: jasmine.createSpy() },
        referenceNum: { reset: jasmine.createSpy(), markAsTouched: jasmine.createSpy() }
      }
    } as any;
    component.newReferenceNum = 'oldValue';
    component.previousReferenceNum = 'oldValue';
    spyOn(component, 'resetSampleFormatAndExample');
    spyOn(component, 'fetchRefNumberAndFormat');

    // Act
    component.askConfirmationFromUser({ requiredRef: 'newType' });

    // Assert
    expect(confirmationService.confirm).toHaveBeenCalledWith({
      message: 'ReqRefTypeConfirmationConst.REQREFTYPECONFMSG',
      header: 'Confirmation',
      key: 'RequiredRefTypeChange',
      accept: jasmine.any(Function),
      reject: jasmine.any(Function)
    });

    // Verify accept callback
    confirmationService.confirm.calls.argsFor(0)[0].accept();
    expect(component.previousReqRefType).toBe('newType');
    expect(component.orderDetailsFormControls.controls.refNumExample.reset).toHaveBeenCalled();
    expect(component.orderDetailsFormControls.controls.referenceNum.reset).toHaveBeenCalled();
    expect(component.newReferenceNum).toBe('');
    expect(component.previousReferenceNum).toBe('');
    expect(component.resetSampleFormatAndExample).toHaveBeenCalled();
    expect(component.fetchRefNumberAndFormat).toHaveBeenCalled();
    expect(component.orderDetailsFormControls.controls.referenceNum.markAsTouched).toHaveBeenCalled();
  });

  it('should restore previous reference type on reject', () => {
    // Arrange
    component.previousReqRefType = 'oldType';
    component.orderDetailsFormControls = {
      controls: {
        requiredRef: { setValue: jasmine.createSpy() },
        refNumExample: { reset: jasmine.createSpy() },
        referenceNum: { reset: jasmine.createSpy(), markAsTouched: jasmine.createSpy() }
      }
    } as any;
    spyOn(component, 'validateReferenceType');

    // Act
    component.askConfirmationFromUser({ requiredRef: 'newType' });
    confirmationService.confirm.calls.argsFor(0)[0].reject();

    // Assert
    expect(component.orderDetailsFormControls.controls.requiredRef.setValue).toHaveBeenCalledWith('oldType', { emitEvent: false });
    expect(component.validateReferenceType).toHaveBeenCalled();
  });

  it('should handle errors in the accept callback', () => {
    // Arrange
    component.previousReqRefType = 'oldType';
    component.orderDetailsFormControls = {
      controls: {
        refNumExample: { reset: jasmine.createSpy() },
        referenceNum: { reset: jasmine.createSpy(), markAsTouched: jasmine.createSpy() }
      }
    } as any;
    spyOn(component, 'resetSampleFormatAndExample').and.throwError('Error');
    spyOn(component, 'fetchRefNumberAndFormat').and.throwError('Error');
    spyOn(console, 'error');

    // Act
    component.askConfirmationFromUser({ requiredRef: 'newType' });
    confirmationService.confirm.calls.argsFor(0)[0].accept();

    // Assert
    expect(console.error).toHaveBeenCalledWith(jasmine.any(Error));
  });
});
